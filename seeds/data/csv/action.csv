name,description,devcaps_cost,mindset_reward,repeatable,requires_matureDeployment and Configuration Management Plan,"Develop a plan for how your system will be deployed, configured, and patched in dire and routine circumstances. Rolling back configurations and hotpatching are common techniques here.",1,1,false,falseIncident Response Plan,"Develop a plan for how your organization will detect and respond to incidents. Determine metrics of network traffic, abnormal system behavior, chain of command, and policies about responsible disclosure.",1,1,false,falseRisk Assessment Plan,"Determine the assets of your system and give them a relative value. Map those assets to the estimated probability of attack, and compute risk from there. Primarily used for prioritization of security resources.",1,1,false,falseMisuse and Abuse Cases,Take use case requirements and mutate them into evil scenarios. Determine what types of damage attackers could do without consideration of how they would accomplish it to determine the specific risks of the domain.,1,1,true,falseThreat Modeling: Develop Model,Construct a data flow model of your architecture. Determine external interactors and trust boundaries. Use STRIDE to consider particularly risky data transfers and other risks of your design.,2,1,true,falseThreat Modeling: Review Threats,Use STRIDE to consider particularly risky data transfers and other risks of your design.,1,2,true,falseLearn embedded security,"Vulnerabilities in this category are common native programming languages (e.g. C) and hardware. e.g.flashing, low-level networking, rootkits, side channel attacks, and memory corruption.",2,2,false,falseLearn side channel attacks,Learn about the many ways that attackers can use physical information to attack deployed systems.,2,2,false,falseLearn database auditability,Securing databases here involves more than simply locking down the server. Repudiation is a huge concern and effective logging is a big part of that.,2,2,false,falseLearn injection attacks,"Injection is the ability to take data and turn it into executable code. Includes SQL injection, Cross-Site Scripting, OS command injection, uncontrolled format string, and many, many more.",2,2,false,falseLearn memory corruption vulnerabilities,"Be able to manipulate memory that leads to things like tampering and arbitrary code execution. Includes buffer overflows, double-free, use-after-free, incorrect buffer size computation, lack of zeroing out key variables.",2,2,false,falseLearn packet flooding attacks,"Learn the many ways that denial of service attacks can be carried out by sending simple, malformed network packets. This includes the basic SYN-flood attacks via bot nets, or more sophisticated attacks on specific servers and protocols.",2,2,false,falseLearn cache poisoning attacks,Caches are important assets that require care and attention to detail. Watch out for those expiration dates and hit counts.,1,1,false,falseLearn compression bombs,"Even the simplest of data can be overly-compressed where the parser becomes overloaded. With compression bombs, you have to carefully manage your environment and parser API when handling compression.",1,1,false,falseLearn file system permissions,"The basics of file systems: users, groups, read, write, execute, setuid, setgid, and umask.",2,2,false,falseLearn distrustful decomposition,Break a system into untrusting processes that have varying permissions depending on their needs. Communicate between processes with inter-process communication.,2,2,false,falseLearn security managers,"In an untrusted API situation, you need to lock down certain parts of the system that requires special privileges. Java provides a strong security manager for such situations.",2,2,false,falseAssess past vulnerabilities,Go over the vulnerabilities you have experienced in the past and perform a post-mortem. Assess and discuss the severity using the CVSS. Determine the engineering failures that led to this particular mistake.,2,3,true,trueHire external penetration testers,"Hire a group of red-team, white-hat hackers to attempt to break into your running system.",1,0,true,trueInsider Threat Seminar,Run a seminar at your company that raises awareness of how insider threat has impacted software engineers and various organizations.,1,1,false,falseInsider Threat Policies,Enact policies and procedures that are designed to mitigate insider threat.,1,0,false,falseUnit Testing: Initial Suite,"Automated unit testing is a common technique that can be costly to start up, but puts developers into the mindset of a tester and checks for basic mistakes.",3,1,false,falseUnit Testing: Maintain,"Continue with unit testing, but with a lower cost.",1,1,true,falseContinuous Integration Initial Setup,"Construct a build system that compiles, integrates, tests, and reports a build constantly. This gets developers to integrate their code with their colleagues early on, and opens up all kinds of other avenues for secure software. A significant initial setup with little security mindset, however.",2,0,false,falseWrite a fuzz tester,"Fuzz testers (aka fuzzers) are testing tools used to discover and automatically test the inputs of a system. They can have a high false-positive rate and need a lot of customization for a given product, but can be useful in discovering and tracking new channels of attack.",2,1,false,falseContinuous Integration: Daily Fuzz Testing,"Fuzz testers need to run for a long time to be exhaustive. This can be helpful, but automating a fuzzer is a big challenge and requires maintenance.",0,0,true,falseContinuous Integration: Track Attack Surface,"Using fuzz testers on a daily build can also provide useful insight into how your system’s risk has changed over time. A new feature, for example, might significantly increase the number of ways the attackers can get in.",1,1,true,falseRun Static Analysis Manually,"Static analysis tools are powerful and relatively easy to run, but have a startup cost of initial configuration and training to lower false positives.",2,1,false,falseContinuous Integration: Daily Static Analysis,Tracking static analysis over time can provide some help in understanding how the system may be improving or degrading.,0,0,true,falseImplement Input Validation,"Thinking defensively, limit the inputs to your system using a combination of blacklists and whitelists.",1,1,false,falseConduct Code Reviews on New Changes,"Have developers invite each other to code reviews of their commits to determine design, style, security, and other potential issues they see without executing the code.",2,1,true,falseSimulate Massive Traffic Events,"Automate how your users interact with the system (e.g. clicks, or network traffic) and repeat it many times to stress your system. Great for finding availability issues.",3,0,true,trueImproved Patch Delivery,Streamline the way that updates are delivered to your product quickly.,1,0,false,falseNetwork change control,Control how your company’s network evolves over time by tracking new nodes and setting strict networking policies.,2,0,false,falseTwo-factor authentication,Enable a feature on your system that allows users to enter something they have (e.g. a rolling code) in addition to their password for authentication.,1,0,false,falseInternal public key infrastructure,Provide a key signing infrastructure for deploying cryptographic certificates internally.,3,0,false,falseCryptographic Research 1,"Begin research on a proprietary, novel algorithm for socket-layer cryptography.",1,1,false,falseCryptographic Research 2,Research is expensive and takes a long time. Various research communities need to be engaged to evaluate it and attempt to break it.,2,0,false,false"Deploy proprietary, novel cryptographic algorithm",Bringing a new crypto algorithm to deployment also has its own hardware and implementation challenges.,3,0,false,falseDeploy SSL/TLS on the product,Deploy the widely-adopted cryptographic protocol to prevent unauthorized packet sniffing.,1,0,false,false